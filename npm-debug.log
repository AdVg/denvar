0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@3.8.7
3 info using node@v5.7.1
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/adrien/Desktop/www/my_node_modules/denvar',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/adrien/.npm/denvar/0.1.0/package.tgz not in flight; packing
9 verbose correctMkdir /Users/adrien/.npm correctMkdir not in flight; initializing
10 info lifecycle denvar@0.1.0~prepublish: denvar@0.1.0
11 silly lifecycle denvar@0.1.0~prepublish: no script for prepublish, continuing
12 verbose tar pack [ '/Users/adrien/.npm/denvar/0.1.0/package.tgz',
12 verbose tar pack   '/Users/adrien/Desktop/www/my_node_modules/denvar' ]
13 verbose tarball /Users/adrien/.npm/denvar/0.1.0/package.tgz
14 verbose folder /Users/adrien/Desktop/www/my_node_modules/denvar
15 verbose addLocalTarball adding from inside cache /Users/adrien/.npm/denvar/0.1.0/package.tgz
16 verbose correctMkdir /Users/adrien/.npm correctMkdir not in flight; initializing
17 silly cache afterAdd denvar@0.1.0
18 verbose afterAdd /Users/adrien/.npm/denvar/0.1.0/package/package.json not in flight; writing
19 verbose correctMkdir /Users/adrien/.npm correctMkdir not in flight; initializing
20 verbose afterAdd /Users/adrien/.npm/denvar/0.1.0/package/package.json written
21 silly publish { name: 'denvar',
21 silly publish   version: '0.1.0',
21 silly publish   description: 'A tool to load environments variables in development, test production environnement locally and finally export them for production',
21 silly publish   author: { name: 'Adrien Valcke', email: 'a.valcke@free.fr' },
21 silly publish   main: 'lib/index.js',
21 silly publish   bin: { denvar: 'bin/index.js' },
21 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
21 silly publish   repository: { type: 'git', url: 'git+https://github.com/AdVg/denvar.git' },
21 silly publish   dependencies: { 'fs-check': '~0.1.0' },
21 silly publish   devDependencies: {},
21 silly publish   keywords: [ 'environment', 'envar', 'development', 'production' ],
21 silly publish   preferGlobal: false,
21 silly publish   private: true,
21 silly publish   analyze: false,
21 silly publish   license: 'MIT',
21 silly publish   readme: '# Denvar\n\n<img src="logo.png" alt="Denvar" align="right" />\n\nA Node module and command line tool to load environments variables - as database user and passwords for example - in development, test production environment locally and finally export them for production.\n\nDenvar make the distinction between your development variables, your production ones and some of them that are common over each environment.\n\n## A full project example\n\nYou will find a [full stack project booster](https://github.com/AdVg/express-hero.git) on Express that uses *Denvar* and [Front Flower](https://github.com/AdVg/front-flower.git), another module that i\'ve made to kick off the workflow with npm as build tool for assets, checking security in Node apps, running test to finally deploy an app on Heroku and export variables (stage or production), all automatically.\n\n## Installation\n\n`npm install denvar --save`\n\n## How does it work ?\n\nDenvar can be :\n\n  - used in your Node application to **load environment variables** in process.env from a .env or env.json file located at your project root directory. If no environment configuration file is found, a sample file will be created. At the moment, only JSON format is supported.\n\n  - used to **get npm config variables** from your .npmrc file (see below for more details) !\n\n  - run in command line commonly to **export production variables** after a deploy by a npm script. At the moment, only *Heroku* is supported.\n\n## How to use it\n\n### Load your environment variables\n\nThere are two ways to load an environment. See *Discussion* section for more information.\n\n  1. **From a .env or env.json file**\n    - located at the root of your project directory\n    - in JSON format (at the moment only supported)\n    - if no file found, a sample env.json file will be created\n\n    Here is an env.json example file :\n    ```javascript\n    {\n      "common": {\n        "MONGO_USER": "superman"\n      },\n      "development":\n      {\n        "NODE_ENV": "development",\n        "DEBUG": "your-project-name:*",\n        "MONGO_PASS": ""\n      },\n      "production":\n      {\n        "NODE_ENV": "production",\n        "MONGO_PASS": "cryptonite",\n        "NODE_MODULES_CACHE": false\n      }\n    }\n    ```\n\n    Require the module as soon as possible and load the key environment that is used in your env.json file. Denvar is flexible so you can use the key name of your choice as \'dev\' or even \'d\' if you prefer. For an example, at the first line in your app.js in Express :\n    ```javascript\n    require(\'denvar\').load(\'development\'); // \'development\' is the key in env.json file\n\n    // Both common and here \'development\' environments can now be accessed as process.env keys\n    debug(process.env.MONGO_USER); // Show \'superman\'\n\n    // Require everything you need\n    var express = require(\'express\');\n    // ...\n\n    // Then create your express app\n    var app = express();\n    ```\n\n  2. **From your .npmrc file (npm configuration file)**\n\n    Yes ! Node automatically load the KEY=VALUE-format variables in your .npmrc file at the root project directory of your app.\n    You can directly access them from `process.env.npm_config_YOUR_VARIABLE` without the help of any module ! .npmrc is also loaded in *Heroku*. There is no matter of any conflict in process.env because your environment variables are not reloaded in it but are set in an projectConfig object.\n\n    *So what Denvar is doing ?*\n    Denvar is simply adding some rules to make the difference between environments and gives you an object with less annoying and very long key names. See example below.\n\n    *And what Denvar is not doing yet ?*\n    No export supported, this file should be read for that purpose and so a parser should be written.\n\n    The .npmrc file :\n    ```\n    access=restricted\n\n    ; This is a comment line\n\n    ; INSTALL PREFIX FOR DEPENDENCIES (more stable and safer for production use than ^!)\n    save-prefix=~\n\n    ; COMMON ENVIRONMENT (prefix must not be changed)\n    C_S3_USER=superhero\n    C_S3_PASS=avengers and xmen together\n\n    ; DEVELOPMENT ENVIRONMENT\n    DEV_NODE_ENV=development\n    DEV_MONGO_USER=superman\n    DEV_MONGO_PASS=cryptonite is not good\n\n    ; PRODUCTION ENVIRONMENT\n    PROD_NODE_ENV=production\n    PROD_MONGO_USER=thor\n    PROD_MONGO_PASS=beware my hammer\n    ```\n\n    As you can see, a prefix is added before each variable so we can make the difference between environments. Note that each variable will be automatically loaded by Node in process.env with npm_config_YOUR_VARIABLE key. You can use Denvar to get an object matching a specific environment and common variables.\n\n    Now in your Node application, require module and get npm config variables as soon as possible.\n    **Please note** that these variables are automatically loaded by Node ONCE your application is running. Moreover, some variables like NODE_ENV and DEBUG should be set at the very first moment to be effectively used by the Node application.\n    ```javascript\n    var projectConfig = require(\'denvar\').getNpmConfig(\'DEV\'); // \'DEV\' is the development prefix in .npmrc file\n\n    // In Express, when var app = express(); is executed, it is too late to set NODE_ENV and DEBUG\n    // So you should not set these variables with app.set method but before setting app object like this :\n    process.env.NODE_ENV = projectConfig.NODE_ENV;\n    process.env.DEBUG = projectConfig.DEBUG;\n\n    // Require everything you need\n    var express = require(\'express\');\n    // ...\n\n    // Then create your express app and use your variables\n    var app = express();\n\n    debug(\'This is my S3 username that i\\\'m going to use soon : \' + projectConfig.S3_USER);\n    ```\n\n### Use it as a command line tool\n  - **Create** a .npmrc or env.json sample file at your project root directory or at a specific path (by default a *env.json* file is created at your project root directory) :\n\n  `denvar --create|-c json|npmrc [path]`\n\n  Examples :\n  ```\n  $ denvar -c                 (creates env.json at project root directory)\n  $ denvar --create npmrc     (creates .npmrc at project root directory)\n  $ denvar -c npmrc ~/www/\n  ```\n\n  - **Export** specified variables to a *Heroku* remote (by default \'production\' variables to \'heroku\' remote) :\n\n  `denvar --export-heroku|exph [environment] [remote]`\n\n  In order to export variables to *Heroku*, you must have a [GitHub](https://github.com/) and [Heroku](https://www.heroku.com/) account plus [Git](https://git-scm.com/) and [heroku-toolbelt](https://toolbelt.heroku.com/) installed. See the [full stack project example](https://github.com/AdVg/express-hero.git) for more details.\n\n  Examples :\n  ```\n  $ denvar --export-heroku\n  $ denvar -exph test stage\n  ```\n\n  - Amazon AWS (ElasticBeanstalk, CloudFront, S3, ...) and others :\n\n  `$oon`\n\n  - Help\n\n  `denvar --help|-h`\n\n### CONFIDENTIAL\nBecause you certainly don\'t want to share your project configuration (username, passwords, ...), **add .env, env.json or .npmrc files to your** *.gitignore* **file** :\n\n```\nnode_modules/*\nnpm-debug.log\n/*.DS_Store\nenv.json\n```\n\n## Discussion\nBy reading a lot of documentation and tutorials, I found two really good ways to load/access environment variables and I don\'t really know what is the very best practice to adopt. Load from an env file in process.env or directly get them from .npmrc file ? Or something else ?\n\nAnother possible way would be to load an env file in the package.json config{} object so we can access our variables with process.env.npm_package_config_YOUR_VARIABLE and reset the object once the application is loaded. And no confidential data pushed to git.\n\nBut I found the variables name too long and annoying. And so why not add your variables in the npm configuration file (.npmrc) that is loaded in the app automatically ? You can access your variables by npm_config_YOUR_VARIABLE or by the object Denvar returns from getNpmConfig() method with no annoying prefixes and depending on your environment. The main problem is that Express uses environment variables in process.env to set up so we must set as soon as possible some variables like NODE_ENV and DEBUG.\n\nWhat *Heroku* says about best practices :\n>Don’t litter your project with environment-specific config files! Instead, take advantage of *environment variables*.\n\nPlease notice that the first method I use will never overset an existed variables in process.env but finally it can be a problem if there are many of our environment variables that we should rename for your application to run ! Okay we can use an alias ?\n\n## Contributing\n\nAny advices or help will be greatly welcome. Feel free to contribute or discuss about these methods so we can improve our best practices and make our work far better.\n\nHere\'s some features that will be nice to add :\n\n  - Test application (very important)\n  - Add support for Amazon and other platforms in CLI export.\n  - Add a parser to load .env file in KEY=VALUE format but still with the distinction between different environments so we still can export production variables\n  - Add support for options {encoding, envPath} for Denvar.prototype.load method so we could load a configuration file not located at the project root directory.\n\n## Notes\n\nThis project was initially made to help me building Node/Express apps with easier environment variables consideration. This structure may not match your attempts or project needs.\n\nThis work is a result of joining different sources on the internet. Here are they :\n\n- [Node Best Practices](https://devcenter.heroku.com/articles/node-best-practices#be-environmentally-aware)\n- [Configuration and Config Vars](https://devcenter.heroku.com/articles/config-vars)\n- [Heroku Local](https://devcenter.heroku.com/articles/heroku-local)\n- [Managing environment variables in Node.js](https://medium.com/@rafaelvidaurre/managing-environment-variables-in-node-js-2cb45a55195f#.v0lafnhld)\n- [Using npm config](https://kirou.wordpress.com/2015/11/09/using-npm-config/)\n- [NPM Scripts Example](https://github.com/keithamus/npm-scripts-example)\n\nMy english seems confusing ? Feel free to correct my \'frenchy\' sentences !\n\n## Licence\n\nThe MIT License (MIT) Copyright © 2016 Adrien Valcke\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the “Software”), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   gitHead: '0b5ed3b71845dc193393e45097ce930564b194f4',
21 silly publish   bugs: { url: 'https://github.com/AdVg/denvar/issues' },
21 silly publish   homepage: 'https://github.com/AdVg/denvar#readme',
21 silly publish   _id: 'denvar@0.1.0',
21 silly publish   _shasum: 'a1be5f0826db07f307227d00fba62970e2817ba9',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 verbose stack Error: This package has been marked as private
23 verbose stack Remove the 'private' field from the package.json to publish it.
23 verbose stack     at publish_ (/usr/local/lib/node_modules/npm/lib/publish.js:100:15)
23 verbose stack     at Array.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/slide/lib/bind-actor.js:15:8)
23 verbose stack     at LOOP (/usr/local/lib/node_modules/npm/node_modules/slide/lib/chain.js:15:14)
23 verbose stack     at LOOP (/usr/local/lib/node_modules/npm/node_modules/slide/lib/chain.js:14:28)
23 verbose stack     at chain (/usr/local/lib/node_modules/npm/node_modules/slide/lib/chain.js:20:5)
23 verbose stack     at /usr/local/lib/node_modules/npm/lib/publish.js:72:5
23 verbose stack     at RES (/usr/local/lib/node_modules/npm/node_modules/inflight/inflight.js:23:14)
23 verbose stack     at f (/usr/local/lib/node_modules/npm/node_modules/once/once.js:17:25)
23 verbose stack     at /usr/local/lib/node_modules/npm/lib/cache.js:362:16
23 verbose stack     at /usr/local/lib/node_modules/npm/node_modules/write-file-atomic/index.js:29:9
24 verbose cwd /Users/adrien/Desktop/www/my_node_modules/denvar
25 error Darwin 15.5.0
26 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
27 error node v5.7.1
28 error npm  v3.8.7
29 error This package has been marked as private
29 error Remove the 'private' field from the package.json to publish it.
30 error If you need help, you may report this error at:
30 error     <https://github.com/npm/npm/issues>
31 verbose exit [ 1, true ]
